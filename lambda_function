import boto3
import os
import re
from collections import defaultdict
from datetime import datetime, timedelta

# Initialize clients
ec2 = boto3.client('ec2')
cloudwatch = boto3.client('logs')
sns = boto3.client('sns')

# Configuration (set these as environment variables)
NACL_ID ='acl-078def87f86593bfa' #edit according to your NACLID
TOPIC_ARN ='arn:aws:sns:eu-west-2:027165077285:BruteForceAlerts' #edit according to your TOPIC_ARN
LOG_GROUP ='CIS-Linux-Server-Authlogs'  # e.g., '/var/log/auth.log'
FAILURE_THRESHOLD = 5  # Block after 5 failures
TIME_WINDOW_MINUTES = 5  # Analyze last 5 minutes of logs

def extract_failed_attempts():
    """Extract IPs with multiple failed login attempts from CloudWatch Logs"""
    # Get log events from the last X minutes
    end_time = int(datetime.now().timestamp()) * 1000
    start_time = int((datetime.now() - timedelta(minutes=TIME_WINDOW_MINUTES)).timestamp()) * 1000

    # Filter pattern for SSH failures (adjust for your OS)
    filter_pattern = '?"Failed password for" ?"invalid user" ?"port" ?"ssh2" ?"Failed:"'

    response = cloudwatch.filter_log_events(
        logGroupName=LOG_GROUP,
        startTime=start_time,
        endTime=end_time,
        filterPattern=filter_pattern,
        limit=10000
    )

    # Count failures per IP
    ip_counts = defaultdict(int)
    ip_pattern = re.compile(r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b')

    for event in response['events']:
        ip_match = ip_pattern.search(event['message'])
        if ip_match:
            ip = ip_match.group()
            ip_counts[ip] += 1

    # Return IPs exceeding threshold
    return [ip for ip, count in ip_counts.items() if count >= FAILURE_THRESHOLD]

def block_ip_in_nacl(ip):
    """Block IP in NACL for SSH/RDP"""
    try:
        for port in [22, 3389]:
            ec2.create_network_acl_entry(
                NetworkAclId=NACL_ID,
                RuleNumber=100 + port,  # 122 for SSH, 138 for RDP
                Protocol='6',  # TCP
                RuleAction='DENY',
                CidrBlock=f"{ip}/32",
                Egress=False,
                PortRange={'From': port, 'To': port}
            )
        return True
    except Exception as e:
        print(f"Error blocking {ip}: {str(e)}")
        return False

def lambda_handler(event, context):
    # Step 1: Detect brute-force IPs
    malicious_ips = extract_failed_attempts()
    
    if not malicious_ips:
        return {"status": "No brute-force attempts detected"}

    # Step 2: Block IPs
    blocked_ips = []
    for ip in malicious_ips:
        if block_ip_in_nacl(ip):
            blocked_ips.append(ip)

    # Step 3: Send alert
    if blocked_ips:
        sns.publish(
            TopicArn=TOPIC_ARN,
            Subject='üö® ALERT: Brute-Force IPs Blocked Automatically',
            Message=f'''
            Automated Brute-Force Protection:
            üî• Blocked IPs: {", ".join(blocked_ips)}
            üõ°Ô∏è Ports Protected: SSH (22) + RDP (3389)
            üîó NACL: {NACL_ID}
            ‚è∞ Time: {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}
            '''
        )

    return {
        'statusCode': 200,
        'body': f"Blocked {len(blocked_ips)} IPs: {', '.join(blocked_ips)}"
    }
